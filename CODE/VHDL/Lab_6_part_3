--Øving_6_part_3


LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;

Entity Lab_6_counters IS
		PORT (		 SW : IN  std_logic_vector(1 downto 0);
			input_clock : IN  std_logic;
				   LEDS : OUT std_logic_vector(7 downto 0);
				   HEX0 : OUT std_logic_vector(6 downto 0));
			
END Lab_6_counters;

Architecture Tflipflop of Lab_6_counters IS

	component TLatch
		PORT(T,clock  : IN std_logic;
				 Q    : OUT std_logic);
	end component;
	
	component timer
			PORT(clock : IN std_logic;
				   sec : OUT std_logic);
	end component;
	
	component segprint
		PORT(seg_input		: IN std_logic_vector(3 downto 0);
		     seg_output	: OUT std_logic_vector(6 downto 0));
	END component;
	
	
	
	signal t_inn_sig : std_logic_vector(4 downto 0);
	signal Q : std_logic_vector (3 downto 0);
	signal clock :std_logic;
	signal disp0 :std_logic_vector(6 downto 0);


begin
	
	time_1 : timer port map(input_clock,clock);
	t_inn_sig(0) <= SW(0);
	LEDS(0) <= clock;
	--Teller logikk
	t_inn_sig(1) <= t_inn_sig(0) AND Q(0);
	t_inn_sig(2) <= t_inn_sig(1) AND Q(1);
	t_inn_sig(3) <= t_inn_sig(2) AND Q(2);
	
	 Tlat : TLatch port map(t_inn_sig(0), clock, Q(0));
	Tlat1 : TLatch port map(t_inn_sig(1), clock, Q(1));
	Tlat2 : TLatch port map(t_inn_sig(2), clock, Q(2));
	Tlat3 : TLatch port map(t_inn_sig(3), clock, Q(3));

	segment1 : segprint port map (Q,disp0);
	HEX0 <= NOT Disp0;
	
end Tflipflop;

LIBRARY ieee;
USE ieee.std_logic_1164.all;
Entity timer is
	PORT(clock : IN std_logic;
		sec : OUT std_logic);
END Entity;

Architecture times of timer is
constant limit :integer := 50000000;
signal r_count :integer range 0 to limit := 0;
signal state : std_logic := '0';
begin
process(clock) is
begin
	if rising_edge(clock) then
		if (r_count < limit) then
			r_count <= r_count +1; -- Ikke ferdig med å telle enda!
			state <= '0';
		elsif r_count = limit then
			state <= '1'; -- setter nå state til ok ferdig med å telle!
			r_count <= 0;
		else
			r_count <= 0;
		end if;
	end if;
end process;
sec <= state;
end times;




LIBRARY ieee;
USE ieee.std_logic_1164.all;

Entity TLatch IS
	PORT(T,clock : IN std_logic;
				  Q    : OUT std_logic);
END TLatch;

Architecture TFF OF TLatch IS
signal tmp : std_logic;

begin
process (clock)
begin
if (clock = '1') then
if T = '0' then
tmp <= tmp;
elsif T = '1' then
tmp <= not(tmp);
end if;
end if;
end process;
Q <= tmp;
end TFF;



-- #### 4 bit HEX to 7 seg process ####
LIBRARY ieee;
USE ieee.std_logic_1164.all;

Entity segprint is
	PORT(seg_input: IN std_logic_vector(3 downto 0);
		  seg_output: OUT std_logic_vector(6 downto 0));
end segprint;

ARCHITECTURE segprint_Arch of segprint is
Signal seg7 : std_logic_vector(6 downto 0);
begin

process(seg_input)
begin
case seg_input IS
	when "0000" => seg7 <= "0111111";
	when "0001" => seg7 <= "0000110";
	when "0010" => seg7 <= "1011011"; 
	when "0011" => seg7 <= "1001111"; 
	when "0100" => seg7 <= "1100110"; 
	when "0101" => seg7 <= "1101101"; 
	when "0110" => seg7 <= "1111101"; 
	when "0111" => seg7 <= "0000111"; 
	when "1000" => seg7 <= "1111111"; 
	when "1001" => seg7 <= "1101111"; 
	when "1010" => seg7 <= "1110111"; 
	when "1011" => seg7 <= "1111100"; 
	when "1100" => seg7 <= "0111001"; 
	when "1101" => seg7 <= "1011110"; 
	when "1110" => seg7 <= "1111001"; 
	when "1111" => seg7 <= "1110001"; 
	when others => NULL;
end case;
end process;
seg_output <= seg7;
end segprint_Arch;
